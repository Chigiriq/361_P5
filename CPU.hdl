// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //A or C instruction
    //  Making c: is instuction A or C?
    //      instrustion[15] = {0, 1] -- {A, C}
    Not(in= instruction[15], out= aInst);
	Mux16(a= ALUout, b= instruction, sel= aInst, out= aREGin);

    //A Register
    //  Making c: destination value first value
    //              ie. is it going to A reg?
    //              = 1xx
    Or(a= aInst, b= instruction[5], out= yesAinst);
    ARegister(in= aREGin, load= yesAinst, out= aREGout, out[0..14]= addressM);
    //Address M done above

    //D Register
    //  Making c: destination value 2nd value
    //              ie. is it going to D reg?
    //              = x1x
    And(a= instruction[15], b= instruction[4], out= yesDinst);
    DRegister(in= ALUout, load= yesDinst, out= dREGout);
    
    //A or M Register Used
    //  is "a" value in instruction[12] 1 or 0?
    And(a= instruction[15], b= instruction[12], out= AorMreg);
    Mux16(a= aREGout, b= inM, sel= AorMreg, out= AorMout);
    
    //ALU
    //  Making cs:
    //  zx: 1xxxxx
    //  nx: x1xxxx
    //  nx: xx1xxx
    //  ny: xxx1xx
    //   f: xxxx1x
    //  no: xxxxx1
    ALU(x= dREGout, y= AorMout, zx= instruction[11], nx= instruction[10], zy= instruction[9], ny= instruction[8], f= instruction[7], no= instruction[6], out= ALUout, zr= zr, ng= ng, out= outM);
    //M output is also done above

    //Write to M
    //  making c:
    //  ie. is it going to M?
    //  = xx1
    And(a= instruction[15], b= instruction[3], out= writeM); 

    //PC
    //  ALUout != 0
    Not(in= zr, out= pos);
    //  ALUout >= 0 
    Not(in= ng, out= nzr);  

    //  JGT (comp > 0)
    And(a=instruction[15], b=instruction[0], out=jgt);
    And(a=pos, b=nzr, out=posnzr);
    And(a=jgt, b=posnzr, out=ld1);

    //  JEQ (comp == 0)
    And(a=instruction[15], b=instruction[1], out=jeq);
    And(a=jeq, b=zr, out=ld2);

    //  JLT (comp < 0)
    And(a=instruction[15], b=instruction[2], out=jlt);
    And(a=jlt, b=ng, out=ld3);

    //  Merge
    //      JGE, JNE, JLE, JMP
    Or(a=ld1, b=ld2, out=ldt);
    Or(a=ld3, b=ldt, out=ld);

    PC(in=aREGout, load=ld, inc=true, reset=reset, out[0..14]=pc);
}